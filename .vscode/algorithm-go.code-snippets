{
	// Place your algorithm-go ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Queue": {
		"scope": "go",
		"prefix": "queue",
		"body": [
			"var ErrQueueEmpty = errors.New(\"Queue: queue is empty\")",
			"",
			"type Queue[T any] struct {",
			"\tdata []T",
			"}",
			"",
			"func NewQueue[T any]() *Queue[T] {",
			"\treturn &Queue[T]{data: []T{}}",
			"}",
			"",
			"func (q *Queue[T]) Empty() bool {",
			"\treturn q.Size() == 0",
			"}",
			"",
			"func (q *Queue[T]) Size() int {",
			"\treturn len(q.data)",
			"}",
			"",
			"func (q *Queue[T]) Front() T {",
			"\tif q.Empty() {",
			"\t\tpanic(ErrQueueEmpty)",
			"\t}",
			"\treturn q.data[0]",
			"}",
			"",
			"func (q *Queue[T]) Push(x T) {",
			"\tq.data = append(q.data, x)",
			"}",
			"",
			"func (q *Queue[T]) PushRange(v []T) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tq.data = append(q.data, v[i])",
			"\t}",
			"}",
			"",
			"func (q *Queue[T]) Pop() T {",
			"\tif q.Empty() {",
			"\t\tpanic(ErrQueueEmpty)",
			"\t}",
			"\tres := q.data[0]",
			"\tq.data = q.data[1:]",
			"\treturn res",
			"}"
		],
		"description": ""
	},
	"Stack": {
		"scope": "go",
		"prefix": "stack",
		"body": [
			"var ErrStackEmpty = errors.New(\"Stack: stack is empty\")",
			"",
			"type Stack[T any] struct {",
			"\tdata []T",
			"}",
			"",
			"func NewStack[T any]() *Stack[T] {",
			"\treturn &Stack[T]{data: []T{}}",
			"}",
			"",
			"func (s *Stack[T]) Empty() bool {",
			"\treturn s.Size() == 0",
			"}",
			"",
			"func (s *Stack[T]) Size() int {",
			"\treturn len(s.data)",
			"}",
			"",
			"func (s *Stack[T]) Top() T {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStackEmpty)",
			"\t}",
			"\treturn s.data[len(s.data)-1]",
			"}",
			"",
			"func (s *Stack[T]) Push(x T) {",
			"\ts.data = append(s.data, x)",
			"}",
			"",
			"func (s *Stack[T]) PushRange(v []T) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\ts.data = append(s.data, v[i])",
			"\t}",
			"}",
			"",
			"func (s *Stack[T]) Pop() T {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStackEmpty)",
			"\t}",
			"\tres := s.data[len(s.data)-1]",
			"\ts.data = s.data[:len(s.data)-1]",
			"\treturn res",
			"}"
		],
		"description": ""
	}
}