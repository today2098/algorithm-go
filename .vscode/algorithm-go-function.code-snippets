{
	// Place your algorithm-go ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Abs": {
		"scope": "go",
		"prefix": "Abs",
		"body": [
			"func Abs[T constraints.Integer | constraints.Float](a T) T {",
			"\tif a >= 0 {",
			"\t\treturn a",
			"\t}",
			"\treturn -a",
			"}"
		],
		"description": ""
	},
	"Accumulate": {
		"scope": "go",
		"prefix": "Accumulate",
		"body": [
			"func Accumulate[T any](v []T, init T, op func(acc, x T) T) T {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tinit = op(init, v[i])",
			"\t}",
			"\treturn init",
			"}",
			"",
			"func DefaultAccumulate[T constraints.Integer | constraints.Float](v []T) T {",
			"\treturn Accumulate(v, 0, func(acc, x T) T {",
			"\t\treturn acc + x",
			"\t})",
			"}"
		],
		"description": ""
	},
	"Chmin, Chmax": {
		"scope": "go",
		"prefix": "Chmin, Chmax",
		"body": [
			"func Chmin[T constraints.Ordered](a *T, b T) bool {",
			"\tif *a > b {",
			"\t\t*a = b",
			"\t\treturn true",
			"\t}",
			"\treturn false",
			"}",
			"",
			"func Chmax[T constraints.Ordered](a *T, b T) bool {",
			"\tif *a < b {",
			"\t\t*a = b",
			"\t\treturn true",
			"\t}",
			"\treturn false",
			"}"
		],
		"description": ""
	},
	"LowerBound, UpperBound": {
		"scope": "go",
		"prefix": "LowerBound, UpperBound",
		"body": [
			"func LowerBound[T constraints.Ordered](v []T, x T) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] >= x",
			"\t})",
			"\treturn itr",
			"}",
			"",
			"func UpperBound[T constraints.Ordered](v []T, x T) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] > x",
			"\t})",
			"\treturn itr",
			"}"
		],
		"description": ""
	},
	"Min, Max": {
		"scope": "go",
		"prefix": "Min, Max",
		"body": [
			"func Min[T constraints.Ordered](a, b T) T {",
			"\tif a < b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func Max[T constraints.Ordered](a, b T) T {",
			"\tif a > b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}"
		],
		"description": ""
	},
	"MinElement, MaxElement": {
		"scope": "go",
		"prefix": "MinElement, MaxElement",
		"body": [
			"func MinElement[T constraints.Ordered](v []T) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmn := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif v[i] < mn {",
			"\t\t\tmn = v[i]",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}",
			"",
			"func MaxElement[T constraints.Ordered](v []T) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmx := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif v[i] > mx {",
			"\t\t\tmx = v[i]",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}"
		],
		"description": ""
	}
}