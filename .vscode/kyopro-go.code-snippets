{
	// Place your algorithm-go ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main Template": {
		"scope": "go",
		"prefix": "main",
		"body": [
			"package main",
			"",
			"import (",
			"\t\"bufio\"",
			"\t\"fmt\"",
			"\t\"math\"",
			"\t\"os\"",
			"\t\"sort\"",
			"\t\"strconv\"",
			"",
			"\t\"golang.org/x/exp/constraints\"",
			")",
			"",
			"const (",
			"\tinf  int     = 1e9",
			"\tlinf int     = 1e18",
			"\teps  float64 = 1e-10",
			"\tmod  int     = 998244353",
			"\tmod2 int     = 1e9 + 7",
			")",
			"",
			"var (",
			"\tsc = bufio.NewScanner(os.Stdin)",
			"\twr = bufio.NewWriter(os.Stdout)",
			")",
			"",
			"func getInt() int {",
			"\tsc.Scan()",
			"\telem, err := strconv.Atoi(sc.Text())",
			"\tif err != nil {",
			"\t\tpanic(err)",
			"\t}",
			"\treturn elem",
			"}",
			"",
			"func getFloat64() float64 {",
			"\tsc.Scan()",
			"\telem, err := strconv.ParseFloat(sc.Text(), 64)",
			"\tif err != nil {",
			"\t\tpanic(err)",
			"\t}",
			"\treturn elem",
			"}",
			"",
			"func getString() string {",
			"\tsc.Scan()",
			"\treturn sc.Text()",
			"}",
			"",
			"func getInts(n int) []int {",
			"\tv := make([]int, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tv[i] = getInt()",
			"\t}",
			"\treturn v",
			"}",
			"",
			"func getStrings(n int) []string {",
			"\tvs := make([]string, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tvs[i] = getString()",
			"\t}",
			"\treturn vs",
			"}",
			"",
			"func out(x ...any) {",
			"\tfmt.Fprintln(wr, x...)",
			"}",
			"",
			"func outArray[T any](arr []T) {",
			"\tfor i := 0; i < len(arr)-1; i++ {",
			"\t\tfmt.Fprintf(wr, \"%v \", arr[i])",
			"\t}",
			"\tif len(arr) > 0 {",
			"\t\tfmt.Fprintf(wr, \"%v\", arr[len(arr)-1])",
			"\t}",
			"\tfmt.Fprintf(wr, \"\\n\")",
			"}",
			"",
			"func fill[T any](v []T, x T) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tv[i] = x",
			"\t}",
			"}",
			"",
			"func min[T constraints.Ordered](a, b T) T {",
			"\tif a < b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func max[T constraints.Ordered](a, b T) T {",
			"\tif a > b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func chmin[T constraints.Ordered](a *T, b T) bool {",
			"\tif *a > b {",
			"\t\t*a = b",
			"\t\treturn true",
			"\t}",
			"\treturn false",
			"}",
			"",
			"func chmax[T constraints.Ordered](a *T, b T) bool {",
			"\tif *a < b {",
			"\t\t*a = b",
			"\t\treturn true",
			"\t}",
			"\treturn false",
			"}",
			"",
			"func abs[T constraints.Integer | constraints.Float](a T) T {",
			"\tif a >= 0 {",
			"\t\treturn a",
			"\t}",
			"\treturn -a",
			"}",
			"",
			"func accumulate[T any](v []T, init T, op func(acc, x T) T) T {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tinit = op(init, v[i])",
			"\t}",
			"\treturn init",
			"}",
			"",
			"func accumulateDefault[T constraints.Integer | constraints.Float](v []T) T {",
			"\treturn accumulate(v, 0, func(acc, x T) T {",
			"\t\treturn acc + x",
			"\t})",
			"}",
			"",
			"func minElement[T constraints.Ordered](v []T) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmn := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif chmin(&mn, v[i]) {",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}",
			"",
			"func maxElement[T constraints.Ordered](v []T) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmx := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif chmax(&mx, v[i]) {",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}",
			"",
			"func lowerBound[T constraints.Ordered](v []T, x T) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] >= x",
			"\t})",
			"\treturn itr",
			"}",
			"",
			"func upperBound[T constraints.Ordered](v []T, x T) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] > x",
			"\t})",
			"\treturn itr",
			"}",
			"",
			"func main() {",
			"\tsc.Split(bufio.ScanWords)",
			"\tsc.Buffer([]byte{}, math.MaxInt32)",
			"\tdefer wr.Flush()",
			"",
			"\t$0",
			"}"
		],
		"description": ""
	},
	"Main Template for Go 1.17": {
		"prefix": "main",
		"body": [
			"package main",
			"",
			"import (",
			"\t\"bufio\"",
			"\t\"fmt\"",
			"\t\"math\"",
			"\t\"os\"",
			"\t\"sort\"",
			"\t\"strconv\"",
			")",
			"",
			"const (",
			"\tinf  int     = 1e9",
			"\tlinf int     = 1e18",
			"\teps  float64 = 1e-10",
			"\tmod  int     = 998244353",
			"\tmod2 int     = 1e9 + 7",
			")",
			"",
			"var (",
			"\tsc = bufio.NewScanner(os.Stdin)",
			"\twr = bufio.NewWriter(os.Stdout)",
			")",
			"",
			"func getInt() int {",
			"\tsc.Scan()",
			"\telem, err := strconv.Atoi(sc.Text())",
			"\tif err != nil {",
			"\t\tpanic(err)",
			"\t}",
			"\treturn elem",
			"}",
			"",
			"func getFloat64() float64 {",
			"\tsc.Scan()",
			"\telem, err := strconv.ParseFloat(sc.Text(), 64)",
			"\tif err != nil {",
			"\t\tpanic(err)",
			"\t}",
			"\treturn elem",
			"}",
			"",
			"func getString() string {",
			"\tsc.Scan()",
			"\treturn sc.Text()",
			"}",
			"",
			"func getInts(n int) []int {",
			"\tv := make([]int, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tv[i] = getInt()",
			"\t}",
			"\treturn v",
			"}",
			"",
			"func getStrings(n int) []string {",
			"\tvs := make([]string, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tvs[i] = getString()",
			"\t}",
			"\treturn vs",
			"}",
			"",
			"func out(x ...interface{}) {",
			"\tfmt.Fprintln(wr, x...)",
			"}",
			"",
			"func outInts(arr []int) {",
			"\tfor i := 0; i < len(arr)-1; i++ {",
			"\t\tfmt.Fprintf(wr, \"%v \", arr[i])",
			"\t}",
			"\tif len(arr) > 0 {",
			"\t\tfmt.Fprintf(wr, \"%v\", arr[len(arr)-1])",
			"\t}",
			"\tfmt.Fprintf(wr, \"\\n\")",
			"}",
			"",
			"func fillInts(v []int, x int) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tv[i] = x",
			"\t}",
			"}",
			"",
			"func min(a, b int) int {",
			"\tif a < b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func max(a, b int) int {",
			"\tif a > b {",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func minElement(v []int) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmn := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif v[i] < mn {",
			"\t\t\tmn = v[i]",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}",
			"",
			"func maxElement(v []int) int {",
			"\tif len(v) == 0 {",
			"\t\treturn 0",
			"\t}",
			"\titr := 0",
			"\tmx := v[0]",
			"\tfor i := 1; i < len(v); i++ {",
			"\t\tif v[i] > mx {",
			"\t\t\tmx = v[i]",
			"\t\t\titr = i",
			"\t\t}",
			"\t}",
			"\treturn itr",
			"}",
			"",
			"func lowerBound(v []int, x int) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] >= x",
			"\t})",
			"\treturn itr",
			"}",
			"",
			"func upperBound(v []int, x int) int {",
			"\titr := sort.Search(len(v), func(i int) bool {",
			"\t\treturn v[i] > x",
			"\t})",
			"\treturn itr",
			"}",
			"",
			"func main() {",
			"\tsc.Split(bufio.ScanWords)",
			"\tsc.Buffer([]byte{}, math.MaxInt32)",
			"\tdefer wr.Flush()",
			"",
			"\t$0",
			"}",
			""
		],
		"description": ""
	}
}