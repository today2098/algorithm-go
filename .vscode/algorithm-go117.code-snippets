{
	// Place your algorithm-go ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Stack117": {
		"scope": "go",
		"prefix": "Stack117",
		"body": [
			"var ErrStack117Empty = errors.New(\"Stack117: stack is empty\")",
			"",
			"// A stack structure.",
			"type Stack117 struct {",
			"\tData []interface{}",
			"}",
			"",
			"// Create a stack.",
			"func NewStack117() *Stack117 {",
			"\treturn &Stack117{",
			"\t\tData: []interface{}{},",
			"\t}",
			"}",
			"",
			"// Checks if the stack is empty.",
			"func (s *Stack117) Empty() bool {",
			"\treturn s.Size() == 0",
			"}",
			"",
			"// Returns the number of elements.",
			"func (s *Stack117) Size() int {",
			"\treturn len(s.Data)",
			"}",
			"",
			"// Returns the top element.",
			"func (s *Stack117) Top() interface{} {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStack117Empty)",
			"\t}",
			"\treturn s.Data[len(s.Data)-1]",
			"}",
			"",
			"// Inserts an element at the top.",
			"func (s *Stack117) Push(x interface{}) {",
			"\ts.Data = append(s.Data, x)",
			"}",
			"",
			"// Inserts elements at the top.",
			"func (s *Stack117) PushRange(v []interface{}) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\ts.Data = append(s.Data, v[i])",
			"\t}",
			"}",
			"",
			"// Removes and returns the top element.",
			"func (s *Stack117) Pop() interface{} {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStack117Empty)",
			"\t}",
			"\tres := s.Data[len(s.Data)-1]",
			"\ts.Data = s.Data[:len(s.Data)-1]",
			"\treturn res",
			"}"
		],
		"description": ""
	}
}