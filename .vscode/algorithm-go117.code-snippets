{
	// Place your algorithm-go ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BinaryHeap117": {
		"scope": "go",
		"prefix": "BinaryHeap117",
		"body": [
			"var ErrBinaryHeap117Empty = errors.New(\"BinaryHeap117: binary-heap is empty\")",
			"",
			"// A binary-heap data structure.",
			"type BinaryHeap117 struct {",
			"\tcmp  BinaryHeap117CmpFunc",
			"\ttree []interface{}",
			"}",
			"",
			"type BinaryHeap117CmpFunc func(a, b interface{}) bool",
			"",
			"// Create a new binary-heap.",
			"func NewBinaryHeap117(f BinaryHeap117CmpFunc) *BinaryHeap117 {",
			"\treturn &BinaryHeap117{",
			"\t\tcmp:  f,",
			"\t\ttree: make([]interface{}, 1),",
			"\t}",
			"}",
			"",
			"// Create a new basic binary-heap.",
			"func NewDefaultBinaryHeap117() *BinaryHeap117 {",
			"\treturn NewBinaryHeap117(func(a, b interface{}) bool {",
			"\t\treturn a.(int) > b.(int)",
			"\t})",
			"}",
			"",
			"func (b *BinaryHeap117) shiftUp(i int) {",
			"\tp := i >> 1",
			"\tfor 1 <= p {",
			"\t\tif b.cmp(b.tree[p], b.tree[i]) {",
			"\t\t\tbreak",
			"\t\t}",
			"\t\tb.tree[p], b.tree[i] = b.tree[i], b.tree[p]",
			"\t\ti = p",
			"\t\tp >>= 1",
			"\t}",
			"}",
			"",
			"func (b *BinaryHeap117) shiftDown(i int) {",
			"\tl, r := i<<1, i<<1|1",
			"\tfor l <= b.Size() {",
			"\t\tif b.Size() < r || b.cmp(b.tree[l], b.tree[r]) {",
			"\t\t\tif b.cmp(b.tree[i], b.tree[l]) {",
			"\t\t\t\tbreak",
			"\t\t\t}",
			"\t\t\tb.tree[i], b.tree[l] = b.tree[l], b.tree[i]",
			"\t\t\ti = l",
			"\t\t} else {",
			"\t\t\tif b.cmp(b.tree[i], b.tree[r]) {",
			"\t\t\t\tbreak",
			"\t\t\t}",
			"\t\t\tb.tree[i], b.tree[r] = b.tree[r], b.tree[i]",
			"\t\t\ti = r",
			"\t\t}",
			"\t\tl, r = i<<1, i<<1|1",
			"\t}",
			"}",
			"",
			"// Checks if the binary-heap is empty.",
			"func (b *BinaryHeap117) Empty() bool {",
			"\treturn b.Size() == 0",
			"}",
			"",
			"// Returns the number of elements.",
			"func (b *BinaryHeap117) Size() int {",
			"\treturn len(b.tree) - 1",
			"}",
			"",
			"// Returns the largest element.",
			"func (b *BinaryHeap117) Top() interface{} {",
			"\tif b.Empty() {",
			"\t\tpanic(ErrBinaryHeap117Empty)",
			"\t}",
			"\treturn b.tree[1]",
			"}",
			"",
			"// Inserts an element into the binary-heap.",
			"func (b *BinaryHeap117) Push(x interface{}) {",
			"\tb.tree = append(b.tree, x)",
			"\tb.shiftUp(b.Size())",
			"}",
			"",
			"// Removes and returns the largest element.",
			"func (b *BinaryHeap117) Pop() interface{} {",
			"\tif b.Empty() {",
			"\t\tpanic(ErrBinaryHeap117Empty)",
			"\t}",
			"\tres := b.tree[1]",
			"\tb.tree[1] = b.tree[b.Size()]",
			"\tb.tree = b.tree[:len(b.tree)-1]",
			"\tif !b.Empty() {",
			"\t\tb.shiftDown(1)",
			"\t}",
			"\treturn res",
			"}"
		],
		"description": ""
	},
	"Deque117": {
		"scope": "go",
		"prefix": "Deque117",
		"body": [
			"var ErrDeque117Empty = errors.New(\"Deque117: deque is empty\")",
			"",
			"// A deque data structure.",
			"type Deque117 struct {",
			"\tData *list.List",
			"}",
			"",
			"// Create a new deque.",
			"func NewDeque117() *Deque117 {",
			"\treturn &Deque117{Data: list.New()}",
			"}",
			"",
			"// Checks if the deque is empty.",
			"func (dq *Deque117) Empty() bool {",
			"\treturn dq.Size() == 0",
			"}",
			"",
			"// Returns the number of elements.",
			"func (dq *Deque117) Size() int {",
			"\treturn dq.Data.Len()",
			"}",
			"",
			"// Returns the first element.",
			"func (dq *Deque117) Front() interface{} {",
			"\tres := dq.Data.Front()",
			"\tif res == nil {",
			"\t\tpanic(ErrDeque117Empty)",
			"\t}",
			"\treturn res.Value",
			"}",
			"",
			"// Returns the last element.",
			"func (dq *Deque117) Back() interface{} {",
			"\tres := dq.Data.Back()",
			"\tif res == nil {",
			"\t\tpanic(ErrDeque117Empty)",
			"\t}",
			"\treturn res.Value",
			"}",
			"",
			"// Inserts an element at the front.",
			"func (dq *Deque117) PushFront(x interface{}) {",
			"\tdq.Data.PushFront(x)",
			"}",
			"",
			"// Inserts elements at the front.",
			"func (dq *Deque117) PushFrontRange(v []interface{}) {",
			"\tfor i := len(v) - 1; i >= 0; i-- {",
			"\t\tdq.Data.PushFront(v[i])",
			"\t}",
			"}",
			"",
			"// Inserts an element at the back.",
			"func (dq *Deque117) PushBack(x interface{}) {",
			"\tdq.Data.PushBack(x)",
			"}",
			"",
			"// Inserts elements at the back.",
			"func (dq *Deque117) PushBackRange(v []interface{}) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tdq.Data.PushBack(v[i])",
			"\t}",
			"}",
			"",
			"// Removes and returns the first element.",
			"func (dq *Deque117) PopFront() interface{} {",
			"\tres := dq.Data.Front()",
			"\tif res == nil {",
			"\t\tpanic(ErrDeque117Empty)",
			"\t}",
			"\treturn dq.Data.Remove(res)",
			"}",
			"",
			"// Removes and returns the last element.",
			"func (dq *Deque117) PopBack() interface{} {",
			"\tres := dq.Data.Back()",
			"\tif res == nil {",
			"\t\tpanic(ErrDeque117Empty)",
			"\t}",
			"\treturn dq.Data.Remove(res)",
			"}"
		],
		"description": ""
	},
	"Queue117": {
		"scope": "go",
		"prefix": "Queue117",
		"body": [
			"var ErrQueue117Empty = errors.New(\"Queue117: queue is empty\")",
			"",
			"// A queue structure.",
			"type Queue117 struct {",
			"\tData []interface{}",
			"}",
			"",
			"// Create a new queue.",
			"func NewQueue117() *Queue117 {",
			"\treturn &Queue117{",
			"\t\tData: []interface{}{},",
			"\t}",
			"}",
			"",
			"// Checks if the queue is empty.",
			"func (q *Queue117) Empty() bool {",
			"\treturn q.Size() == 0",
			"}",
			"",
			"// Returns the number of elements.",
			"func (q *Queue117) Size() int {",
			"\treturn len(q.Data)",
			"}",
			"",
			"// Returns the front element.",
			"func (q *Queue117) Front() interface{} {",
			"\tif q.Empty() {",
			"\t\tpanic(ErrQueue117Empty)",
			"\t}",
			"\treturn q.Data[0]",
			"}",
			"",
			"// Inserts an element at the back.",
			"func (q *Queue117) Push(x interface{}) {",
			"\tq.Data = append(q.Data, x)",
			"}",
			"",
			"// Inserts an elements at the back.",
			"func (q *Queue117) PushRange(v []interface{}) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\tq.Data = append(q.Data, v[i])",
			"\t}",
			"}",
			"",
			"// Removes and returns the front element.",
			"func (q *Queue117) Pop() interface{} {",
			"\tif q.Empty() {",
			"\t\tpanic(ErrQueue117Empty)",
			"\t}",
			"\tres := q.Data[0]",
			"\tq.Data = q.Data[1:]",
			"\treturn res",
			"}"
		],
		"description": ""
	},
	"Stack117": {
		"scope": "go",
		"prefix": "Stack117",
		"body": [
			"var ErrStack117Empty = errors.New(\"Stack117: stack is empty\")",
			"",
			"// A stack structure.",
			"type Stack117 struct {",
			"\tData []interface{}",
			"}",
			"",
			"// Create a new stack.",
			"func NewStack117() *Stack117 {",
			"\treturn &Stack117{",
			"\t\tData: []interface{}{},",
			"\t}",
			"}",
			"",
			"// Checks if the stack is empty.",
			"func (s *Stack117) Empty() bool {",
			"\treturn s.Size() == 0",
			"}",
			"",
			"// Returns the number of elements.",
			"func (s *Stack117) Size() int {",
			"\treturn len(s.Data)",
			"}",
			"",
			"// Returns the top element.",
			"func (s *Stack117) Top() interface{} {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStack117Empty)",
			"\t}",
			"\treturn s.Data[len(s.Data)-1]",
			"}",
			"",
			"// Inserts an element at the top.",
			"func (s *Stack117) Push(x interface{}) {",
			"\ts.Data = append(s.Data, x)",
			"}",
			"",
			"// Inserts elements at the top.",
			"func (s *Stack117) PushRange(v []interface{}) {",
			"\tfor i := 0; i < len(v); i++ {",
			"\t\ts.Data = append(s.Data, v[i])",
			"\t}",
			"}",
			"",
			"// Removes and returns the top element.",
			"func (s *Stack117) Pop() interface{} {",
			"\tif s.Empty() {",
			"\t\tpanic(ErrStack117Empty)",
			"\t}",
			"\tres := s.Data[len(s.Data)-1]",
			"\ts.Data = s.Data[:len(s.Data)-1]",
			"\treturn res",
			"}"
		],
		"description": ""
	}
}